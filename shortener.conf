events {
    worker_connections  1024;
}


http {
    server {
    
        listen 8080;

        set $restricted true;
        set $redis_db 1;

        location ~ ^/robots.txt$ {
            add_header Content-Type text/plain;
            echo "User-agent: *";
            echo "Disallow: /";
        }
        
        location ~ ^/count {
            internal;
            redis2_query select $redis_db;
            redis2_query get count;
            redis2_pass 127.0.0.1:6379;
        }
        
        location ~ ^/lookup {
            internal;
            set_unescape_uri $lookup $arg_lookup;
            redis2_query select $redis_db;
            redis2_query keys $lookup;
            redis2_pass 127.0.0.1:6379;
        }
        
        location ~ ^/save$ {
            internal;
            redis2_query select $redis_db;
            set_unescape_uri $url $arg_url;
            set_unescape_uri $id $arg_id;
            redis2_query set $id $url;
            redis2_query incr count;
            redis2_pass 127.0.0.1:6379;
          }
        
        location ~ ^/shorten$ {
            add_header Content-Type text/plain;
            
            if ($restricted) {
                access_by_lua '
                    local prefixes = {"http://somedomain.com", "http://someotherdomain.com"};
                    local ok = false;
                    
                    for k, v in ipairs(prefixes) do
                        tmp = string.find(ngx.var.arg_url, v);
                        if (1 == tmp) then
                            ok = true;
                            break;
                        end
                    end
                    
                    if (false == ok) then
                        return ngx.exit(403);
                    end
                ';
            }
            
            content_by_lua '

                local parser = require "redis.parser"   


                -- see if we have the url already

                local hash = ngx.md5(ngx.var.arg_url);
                local res = ngx.location.capture("/lookup", { args = { lookup = "*:"..hash } } );

                local results, type = parser.parse_replies(res.body, 2);
                
                if not (table.getn(results[2][1]) == 0) then
                    local s, e = string.find(results[2][1][1], ":");
                    ngx.say("http://" .. ngx.var.host .. string.sub(results[2][1][1], 1, s - 1));
                    return ngx.exit(200);
                end
                
                local res = ngx.location.capture("/count");
                local results, type = parser.parse_replies(res.body, 2)
              
                if (nil == results[2][1]) then
                    results[2][1] = 0;
                end

                basen = function(n)
                    local digits = "0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ"
                    local t = {}
                    repeat
                        local d = (n % 62) + 1
                        n = math.floor(n / 62)
                        table.insert(t, 1, digits:sub(d, d))
                    until n == 0
                    return table.concat(t,"");
                end

              local id = basen(results[2][1] + 1)

              ngx.location.capture("/save",
                { args = { id = "/"..tostring(id)..":"..ngx.md5(ngx.var.arg_url), url = ngx.var.arg_url } }
              )
              ngx.say("http://" .. ngx.var.host .. "/" .. id)
            ';
            
        }

        location /get {
            internal;
            set_unescape_uri $id $arg_id;
            redis2_query select $redis_db;
            redis2_query get $id;
            redis2_pass 127.0.0.1:6379;
        }
                        
        location / {
            content_by_lua '
            
                local parser = require "redis.parser";
                
                local res = ngx.location.capture("/lookup", { args = { lookup = ngx.var.request_uri..":*" } } );
                
                local results, type = parser.parse_replies(res.body, 2);

                if table.getn(results[2][1]) == 0 then
                    return ngx.exit(ngx.HTTP_NOT_FOUND);
                end
                
                local res = ngx.location.capture("/get", { args = { id = results[2][1][1] } } );
                local href, type = parser.parse_replies(res.body, 2);
                
                if type == parser.ERROR_REPLY or href == nil or href[2][1] == nil then
                    return ngx.exit(ngx.HTTP_NOT_FOUND);
                else
                    ngx.redirect(href[2][1]); 
                end
                
            ';
        }  

    }
}
